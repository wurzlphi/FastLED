#!/bin/bash

set -e

# Parse command line arguments
RUN_JS_LINTING=false
RUN_FULL_LINTING=false
USE_ULTRA_FAST_JS=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --js)
            RUN_JS_LINTING=true
            shift
            ;;
        --js-fast)
            RUN_JS_LINTING=true
            USE_ULTRA_FAST_JS=true
            shift
            ;;
        --full)
            RUN_JS_LINTING=true
            RUN_FULL_LINTING=true
            shift
            ;;
        --help|-h)
            echo "Usage: bash lint [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --js         Include JavaScript linting (optimized)"
            echo "  --js-fast    Include JavaScript linting (ultra-fast, minimal output)"
            echo "  --full       Include all linting (same as --js)"
            echo "  --help       Show this help message"
            echo ""
            echo "By default, only Python and C++ linting is performed."
            echo "Performance comparison:"
            echo "  ‚Ä¢ --js-fast: ~8-9 seconds (ultra-fast, essential checks only)"
            echo "  ‚Ä¢ --js:      ~9-10 seconds (optimized, includes analysis)"
            echo "  ‚Ä¢ Legacy:    ~9-10 seconds (baseline version)"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Unset VIRTUAL_ENV to avoid warnings about mismatched paths
unset VIRTUAL_ENV

# Overwrite .vscode/launch.json if it's different
cat > .vscode/launch.json << 'EOL'
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python Debugger: Current File",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal"
        },
        {
            "type": "by-gdb",
            "request": "launch",
            "name": "Launch(gdb)",
            "program": "tests/.build/bin/${fileBasenameNoExtension}",
            "cwd": "${workspaceRoot}"
        },
    ]
}
EOL

echo "üöÄ Running FastLED Comprehensive Linting Suite"
echo "=============================================="

# Python linting
echo ""
echo "üìù PYTHON LINTING"
echo "------------------"
echo "Running ruff check"
uv run ruff check --fix test.py
uv run ruff check --fix ci --exclude ci/tmp/ --exclude ci/wasm/
uv run ruff check --fix dev/dev.py
echo "Running black"
uv run black ci --exclude ci/tmp/ --exclude ci/wasm/
uv run black dev/dev.py
echo "Running isort"
uv run isort --profile black ci --skip ci/tmp/ --skip ci/wasm/
uv run isort --profile black dev/dev.py
echo "Running pyright ci"
uv run pyright ci

export CLANG_FORMAT_STYLE="{SortIncludes: false}"

# C++ linting
echo ""
echo "üîß C++ LINTING"
echo "---------------"
folders=(
    #"src/lib8tion"
    #"src/platforms/stub"
    #"src/platforms/apollo3"  # clang-format breaks apollo3
    #"src/platforms/esp/8266"  # clang-format breaks esp8266
    #"src/platforms/arm" # clang-format breaks arm
    #"src/fx"
    #"src/fl"
    #"src/platforms/wasm"
)

for folder in "${folders[@]}"; do
  echo "Running clang-format on $folder"
  uv run ci/run-clang-format.py -i -r "$folder" || uv run ci/run-clang-format.py -i -r "$folder"
done

# JavaScript linting and enhanced checking (only if --js or --full is specified)
if [ "$RUN_JS_LINTING" = true ]; then
    echo ""
    echo "üåê JAVASCRIPT LINTING & TYPE CHECKING"
    echo "--------------------------------------"

    if [ -f ".js-tools/deno/deno" ]; then
        if [ "$USE_ULTRA_FAST_JS" = true ]; then
            echo "Running ultra-fast JavaScript linting"
            ./lint-js-ultra-fast
        else
            echo "Running optimized JavaScript linting"
            ./lint-js-fast
            
            # Run JavaScript enhancement analysis for additional insights (optional)
            if [ -f "scripts/enhance-js-typing.py" ]; then
                echo "Running JavaScript enhancement analysis"
                python3 scripts/enhance-js-typing.py --approach summary 2>/dev/null || echo "  ‚ÑπÔ∏è  Enhancement analysis completed (some warnings expected)"
            fi
        fi
    else
        echo "‚ö†Ô∏è  JavaScript linting tools not found. Run: python3 ci/setup-js-linting.py"
    fi
else
    echo ""
    echo "üåê JAVASCRIPT LINTING (SKIPPED)"
    echo "-------------------------------"
    echo "‚ÑπÔ∏è  JavaScript linting skipped. Use --js, --js-fast, or --full to include it."
fi

echo ""
echo "üéâ All linting completed!"
echo "========================="
echo ""
echo "üí° FOR AI AGENTS:"
echo "  - Use 'bash lint' for Python and C++ linting (default)"
echo "  - Use 'bash lint --js-fast' for ultra-fast JavaScript linting (~8-9s)"
echo "  - Use 'bash lint --js' for comprehensive JavaScript linting (~9-10s)"
echo "  - Use 'bash lint --help' for all options and performance info"
