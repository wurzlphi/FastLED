#!/bin/bash
# FastLED JavaScript Linting Script (Ultra-Fast)
# Optimized for maximum speed - skips optional analysis

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

DENO_BINARY=".js-tools/deno/deno"

echo -e "${BLUE}⚡ FastLED JavaScript Linting (Ultra-Fast)${NC}"

# Check if Deno is installed
if [ ! -f "$DENO_BINARY" ]; then
    echo -e "${RED}❌ Deno not found. Run: uv run ci/setup-js-linting.py${NC}"
    exit 1
fi

# Create cache directory to avoid cache issues
export DENO_DIR="/tmp/deno_cache_fastled"
mkdir -p "$DENO_DIR"

# Quick file count
FILE_COUNT=$(find src/platforms/wasm/compiler -name "*.js" -type f 2>/dev/null | wc -l)
if [ "$FILE_COUNT" -eq 0 ]; then
    echo -e "${YELLOW}⚠️  No JavaScript files found${NC}"
    exit 0
fi

echo -e "${BLUE}Processing ${FILE_COUNT} JavaScript files...${NC}"

# Run operations in sequence for maximum speed
ERROR_COUNT=0

# Lint check
if ! "$DENO_BINARY" lint --config deno.json --quiet 2>/dev/null; then
    echo -e "${YELLOW}⚠️  Linting issues found${NC}"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

# Format check + auto-fix
if ! "$DENO_BINARY" fmt --config deno.json --check --quiet 2>/dev/null; then
    "$DENO_BINARY" fmt --config deno.json --quiet 2>/dev/null
fi

# Quick result
if [ $ERROR_COUNT -eq 0 ]; then
    echo -e "${GREEN}✅ JavaScript linting completed successfully${NC}"
    exit 0
else
    echo -e "${RED}❌ JavaScript linting failed${NC}"
    # Show details only on failure
    "$DENO_BINARY" lint --config deno.json
    exit 1
fi
