#!/bin/bash
# FastLED JavaScript Linting Script (Optimized)
# Combines linting, formatting, and type checking in a single efficient run

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

DENO_BINARY=".js-tools/deno/deno"

echo -e "${BLUE}üöÄ FastLED JavaScript Linting (Optimized)${NC}"

# Check if Deno is installed
if [ ! -f "$DENO_BINARY" ]; then
    echo -e "${RED}‚ùå Deno not found. Run: uv run ci/setup-js-linting.py${NC}"
    exit 1
fi

# Create cache directory to avoid cache issues
export DENO_DIR="/tmp/deno_cache_fastled"
mkdir -p "$DENO_DIR"

# Find JavaScript files using deno.json config (single discovery)
echo -e "${BLUE}üìÅ Discovering JavaScript files...${NC}"
JS_FILES=$(find src/platforms/wasm/compiler -name "*.js" -type f 2>/dev/null)

if [ -z "$JS_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No JavaScript files found${NC}"
    exit 0
fi

FILE_COUNT=$(echo "$JS_FILES" | wc -l)
echo -e "${BLUE}Found ${FILE_COUNT} JavaScript files${NC}"

# Run all operations efficiently
ERROR_COUNT=0

# Step 1: Lint all files in one batch command
echo -e "${BLUE}üîç Running lint check...${NC}"
if "$DENO_BINARY" lint --config deno.json 2>/dev/null; then
    echo -e "${GREEN}  ‚úÖ Linting passed${NC}"
else
    echo -e "${YELLOW}  ‚ö†Ô∏è  Linting issues found:${NC}"
    "$DENO_BINARY" lint --config deno.json
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

# Step 2: Format check all files in one batch command  
echo -e "${BLUE}üé® Running format check...${NC}"
if "$DENO_BINARY" fmt --config deno.json --check 2>/dev/null; then
    echo -e "${GREEN}  ‚úÖ Formatting is correct${NC}"
else
    echo -e "${YELLOW}  ‚ö†Ô∏è  Formatting issues found. Auto-fixing...${NC}"
    if "$DENO_BINARY" fmt --config deno.json; then
        echo -e "${GREEN}  ‚úÖ Formatting fixed automatically${NC}"
    else
        ERROR_COUNT=$((ERROR_COUNT + 1))
    fi
fi

# Step 3: Type checking (if enabled)
CHECK_JS_ENABLED=$(grep -o '"checkJs": *true' deno.json || echo "false")
if [[ "$CHECK_JS_ENABLED" != "false" ]]; then
    echo -e "${BLUE}üî¨ Running type checking...${NC}"
    TYPE_ERRORS=0
    for file in $JS_FILES; do
        if ! "$DENO_BINARY" check --config deno.json "$file" 2>/dev/null; then
            TYPE_ERRORS=$((TYPE_ERRORS + 1))
        fi
    done
    
    if [ $TYPE_ERRORS -eq 0 ]; then
        echo -e "${GREEN}  ‚úÖ Type checking passed${NC}"
    else  
        echo -e "${YELLOW}  ‚ö†Ô∏è Type errors found in $TYPE_ERRORS file(s)${NC}"
        ERROR_COUNT=$((ERROR_COUNT + 1))
    fi  
fi

# Summary
echo ""
if [ $ERROR_COUNT -eq 0 ]; then
    echo -e "${GREEN}üéâ All JavaScript checks passed!${NC}"
    echo -e "${BLUE}üìä Processed $FILE_COUNT files efficiently${NC}"
    if [[ "$CHECK_JS_ENABLED" != "false" ]]; then
        echo -e "${BLUE}üî¨ Type checking: ENABLED${NC}"
    else
        echo -e "${BLUE}üî¨ Type checking: Available but disabled${NC}"
        echo -e "${BLUE}   To enable: edit deno.json, set \"checkJs\": true${NC}"
    fi
    exit 0
else
    echo -e "${RED}‚ùå Found issues in JavaScript files${NC}"
    echo -e "${YELLOW}üí° Fix the issues above before proceeding${NC}"
    exit 1
fi
