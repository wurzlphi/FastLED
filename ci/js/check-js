#!/bin/bash
# FastLED JavaScript Type Checking Script (Deno-based)
# Uses Deno's built-in TypeScript checker to validate JSDoc types

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç FastLED JavaScript Enhanced Linting (Deno-based)${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Check if Deno is installed
if [ ! -f "$PROJECT_ROOT/.js-tools/deno/deno" ]; then
    echo -e "${RED}‚ùå Deno not found. Run: uv run ci/setup-js-linting.py${NC}"
    exit 1
fi

# Change to project root
cd "$PROJECT_ROOT"

# Find JavaScript files in WASM platform
JS_FILES=$(find src/platforms/wasm -name "*.js" -type f 2>/dev/null)

if [ -z "$JS_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No JavaScript files found in src/platforms/wasm/${NC}"
    exit 0
fi

echo -e "${BLUE}Found JavaScript files:${NC}"
echo "$JS_FILES" | sed 's/^/  /'

# Check if type checking is enabled in deno.json
CHECK_JS_ENABLED=$(grep -o '"checkJs": *true' deno.json || echo "false")

# Run enhanced linting with Deno (syntax, style, and best practices)
if [[ "$CHECK_JS_ENABLED" != "false" ]]; then
    echo -e "${BLUE}Running enhanced JavaScript linting + type checking...${NC}"
else
    echo -e "${BLUE}Running enhanced JavaScript linting...${NC}"
fi

TYPE_ERRORS=0
for file in $JS_FILES; do
    echo -e "${BLUE}Checking: $file${NC}"
    
    # First run linting
    if ! ".js-tools/deno/deno" lint --config deno.json "$file" 2>/dev/null; then
        echo -e "${YELLOW}  ‚ö†Ô∏è  Lint issues found in $file...${NC}"
        ".js-tools/deno/deno" lint --config deno.json "$file"
        TYPE_ERRORS=$((TYPE_ERRORS + 1))
        continue
    fi
    
    # Then run type checking if enabled
    if [[ "$CHECK_JS_ENABLED" != "false" ]]; then
        if ".js-tools/deno/deno" check --config deno.json "$file" 2>/dev/null; then
            echo -e "${GREEN}  ‚úÖ $file - No lint or type errors${NC}"
        else
            echo -e "${YELLOW}  üîç Type checking $file...${NC}"
            ".js-tools/deno/deno" check --config deno.json "$file"
            TYPE_ERRORS=$((TYPE_ERRORS + 1))
        fi
    else
        echo -e "${GREEN}  ‚úÖ $file - No lint errors${NC}"
    fi
done

echo ""
if [ $TYPE_ERRORS -eq 0 ]; then
    if [[ "$CHECK_JS_ENABLED" != "false" ]]; then
        echo -e "${GREEN}üéâ All JavaScript files passed enhanced linting AND type checking!${NC}"
        echo -e "${BLUE}üí° This covers syntax, style, best practices, and JSDoc type safety.${NC}"
        echo -e ""
        echo -e "${BLUE}üî¨ JSDoc type checking is currently ENABLED.${NC}"
        echo -e "${BLUE}   To disable type checking, edit deno.json and set:${NC}"
        echo -e "   ${BLUE}\"checkJs\": false${NC}"
    else
        echo -e "${GREEN}üéâ All JavaScript files passed enhanced linting!${NC}"
        echo -e "${BLUE}üí° This covers syntax, style, and best practices.${NC}"
        echo -e ""
        echo -e "${BLUE}üî¨ Full JSDoc type checking is available but currently disabled.${NC}"
        echo -e "${BLUE}   To enable type checking, edit deno.json and set:${NC}"
        echo -e "   ${BLUE}\"checkJs\": true${NC}"
    fi
    echo -e ""
    echo -e "${BLUE}üí° To improve type safety, consider adding JSDoc annotations:${NC}"
    echo -e "   ${BLUE}/**${NC}"
    echo -e "   ${BLUE} * @param {string} name - Parameter description${NC}"
    echo -e "   ${BLUE} * @param {number} age - Parameter description${NC}"
    echo -e "   ${BLUE} * @returns {Promise<User>} Description of return value${NC}"
    echo -e "   ${BLUE} */${NC}"
    echo -e "   ${BLUE}async function createUser(name, age) { ... }${NC}"
    exit 0
else
    if [[ "$CHECK_JS_ENABLED" != "false" ]]; then
        echo -e "${RED}‚ùå Found $TYPE_ERRORS file(s) with linting or type checking issues${NC}"
        echo -e "${YELLOW}üí° Fix linting and type errors before proceeding${NC}"
    else
        echo -e "${RED}‚ùå Found $TYPE_ERRORS file(s) with linting issues${NC}"
        echo -e "${YELLOW}üí° Fix linting issues before proceeding${NC}"
    fi
    exit 1
fi 
